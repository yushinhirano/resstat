##########################################################################
##########################################################################
###################### ============================ ######################
###################### ResStat Tools Version 0.3.0  ######################
###################### ============================ ######################
##########################################################################
##########################################################################


■Contents

1. HOW TO Install

2. HOW TO Use (Local Node)

3. HOW TO Use (Multi Node)

4. Functions

5. Trouble

6. Installation Requirement

7. Other Infomation


######################################################################
# 0. Overview
######################################################################

-----   軽量パフォーマンスモニタツール resstat   -----

パフォーマンス・リソースレポートツールのsar、mpstat、iostat、vmstat、pidstatの起動停止管理、
及びグラフ化を非リアルタイムに行う軽量ツールです。

リアルタイムにグラフ化するものではなく、
一定時間内のリソースレポートを後にグラフ画像として残す場合に使用できます。

類型のパッケージとしては主に以下が挙げられます。
この種の機能を持つとお考えください。

isag         : http://www.volny.cz/linux_monitor/isag/
sarvant      : http://sarvant.sourceforge.net/
Sar 2gp      : http://developer.berlios.de/projects/sar2gp
sarplot      : http://sourceforge.net/projects/sarplot/
kSar         : http://sourceforge.net/projects/ksar/


ここから、このresstatツールの起動方法について解説します。
とりあえず動けばいい、という程度で簡単に試してみるには、
BRIEFファイルを参照してみてください。


######################################################################
# 1. HOW TO Install
######################################################################

(0). インストールを行う前に
     本パッケージの対象OSはLinux系OSです。
     それ以外のOSでは動作しませんのでご注意ください。

     Linux系OSにおける詳細なインストール要件は「6. Installation Requirement」を参照してください。
     大抵のディストリビューションで、最小構成でOSを入れた場合には動かないことがありますので、
     最低でもsysstat、gnuplot、zshの存在くらいは確認しておきましょう。


(1). 実行ユーザの決定
     本ツールを起動するユーザは、出来る限り専用のローカルユーザを作成することが推奨されます。
     （ローカルではなくNIS上のユーザは、ほとんどがNFSでマウントしたディスクをホームとするため
       ネットワークの測定に余計な負荷が掛かるのでお勧めしません）
     大きく邪魔をするわけではありませんが、少なくともパフォーマンス測定中に
     重要なアプリケーションを実行するユーザとは別にした方が良いでしょう。

     新たに作成する場合、一例として[monitor]というユーザ名で作成するには以下の様に行います。
     （rootユーザで作業するか、sudoを前置すること）

     # ローカルユーザ作成
     $ useradd monitor
     $ passwd monitor


(2). インストール
     実行ユーザでログインし、インストールを行います。
     格納先は実行ユーザが自由に読み書き実行出来るディレクトリとします。
     展開するディレクトリは任意です。

     ①．github
       githubから取得する場合、以下のコマンドを実行します。
       
       $ git clone git://github.com/yushinhirano/resstat.git

     ②．tarballの展開
       resstatのtarアーカイブを取得してインストールする場合。

       展開には以下のコマンドを使用します。

       $ tar xf resstat-X.X.X.tar.bz2

       （X.X.Xはバージョン番号。指定パスは展開先によって変えてください）

       以下、展開されたディレクトリ[resstat-X.X.X](X.X.Xはバージョン番号)を、<RESSTAT_HOME>と表記します。


(3). 文字コードについて
     後述する「resstat管理ツール」を使って対話的に実行する場合と、
     各スクリプトのヘルプを参照する場合やソース自体を読む場合には、
     ロケールと端末の文字コードをUTF-8に統一してください。



※※※※※※※※※※※※※※※※※※※※※※※※

【注意！】

※※※※※※※※※※※※※※※※※※※※※※※※

以下は本当に冗長な説明です。

とりあえず何ができるかざっとつかむには、
BRIEFファイルを見て適当に実行してみましょう。大体の場合それで充分だったりします。



######################################################################
# 2. HOW TO Use (Local Node)
######################################################################

■ローカルノードに対してのみ実行するには

(0). 準備(起動時間、起動間隔の修正)
     ・resstat.confの修正。
       <RESSTAT_HOME>/conf/resstat.confを、viエディタなどで開きます。

       $ cd <RESSTAT_HOME>/
       $ vi conf/resstat.conf

       TOTAL_MINUTESパラメータに、起動時間（分）を、
       INTERVAL_SECパラメータに、起動間隔（秒）を、
       それぞれ入力して保存します。
       修正しない場合、デフォルトでは1秒間隔で最大二日分取得するようになっています。


(1). start -- stop -- collect -- output

     以下の順に行うことで、1サイクルとなります。
     start   :  測定開始
     stop    :  測定終了（あるいは、起動時間が過ぎると自動的に終了）
     collect :  測定結果の収集
     output  :  測定結果の閲覧用zip出力

     start  -->  stopと実行後は、二回目の起動前にcollect  -->  outputも実行してください。

     ①. コマンドラインから実行する
         ローカルノード実行には、<RESSTAT_HOME>/bin/ctrlresstat.shを使います。
         
         # 起動ディレクトリ
         $ cd <RESSTAT_HOME>/bin

         # start
         $ ./ctrlresstat.sh start
         
         # stop
         $ ./ctrlresstat.sh stop
         
         # collect
         $ ./ctrlresstat.sh collect
         
         # output
         $ ./ctrlresstat.sh output

         outputの終了後、<RESSTAT_HOME>/archiveディレクトリに、
         パフォーマンスグラフ画像ファイルを圧縮したzipファイルが出力されています。
         (output実行時の標準出力の最後に、その名称が表示されます)
         Linuxデスクトップ環境やWindows端末などを使い、zipファイルを解凍して、
         その解凍後トップディレクトリに存在するindex.htmlを、画像表示可能なブラウザで閲覧してください。


     ②. resstat管理ツールを使って対話的に実行する
         <RESSTAT_HOME>/bin/management_tool.shを使用すると、管理ツールが起動します。
         CUIで対話的にユーザに実行を促しますので、その要求に従ってください。

         起動後は、
         「1. ローカルノード単独起動」を選択し、
         「1. start」「2. stop」「3. collect and output」のメニューを選択すれば、
         それらの機能が動作します。（出力ディレクトリ等を変更せず、全てデフォルトのまま[y]と入力します）
         output終了後、<RESSTAT_HOME>/archiveディレクトリに
         zipファイルが作成されている点は変わりません。


(2). コンフィグレーション
     「(0). 準備」で起動間隔と最大起動時間を調整した他に、
     取得ダンプ/グラフ化の対象を調整することが可能です。（デフォルトでは、全てのグラフ化を有効にはしていません）

     基本的に、<RESSTAT_HOME>/conf/{SYSKBN}/command.confを変更すればよいでしょう。
     一度start機能を実行するか、あるいは「configure」機能を使用していれば、
     このSYSKBN値は「linux」となり適切な値にリンクされるため、
     このファイルは<RESSTAT_HOME>/conf/linux/command.confとなります。
     
     configure機能は、このファイルの「4 - (4) - ①. マシンに応じたConfigureと自動コンフィグ」を、
     command.confは、このファイルの「4 - (4) - ③. 実行コマンドとグラフ化対象の調整」を参照してください。


######################################################################
# 3. HOW TO Use (Multi Node)
######################################################################

■複数ノードに対して、一斉に実行するには

このツールは複数ノードに対し、ssh接続を通じて一斉にresstatの実行管理を行う機能を備えています。
しかし、リモート接続のための条件を整えるため、
厳しい制約が掛かりますので、以下の条件を良くお読みの上でご使用ください。

(0). 準備
     ①. 起動対象ノードの記述
         <RESSTAT_HOME>/conf/targethostを、viエディタなどで開きます。

         $ cd <RESSTAT_HOME>/
         $ vi conf/targethost

         このファイルに、一斉起動管理を行うノードを1行1ノードで記述します。
         記述する際は、以下の点に注意してください。

         ・起動対象に自ノードを含む場合、自ノードも記述する。
         ・自ノードは、「uname -n」または「hostname」コマンドで出力される名称で記述する。
         ・自ノード以外のノードは、自ノードから名前解決可能なホスト名か、あるいはIPv4アドレスで指定する。

     ②. 起動時間、起動間隔の修正
         ローカルノード起動の場合と同様です。
         「2-(0). 準備(起動時間、起動間隔の修正)」をご参照ください。

     ③. 起動対象ノードの環境調整
         起動対象となる全てのノードについて、以下の項目を満たす必要があります。

         ・実行ユーザ
           自ノードと同じユーザが存在する。

         ・ssh公開鍵接続
           自ノードから接続対象の全てのノードについて（自ノードを含む）、
           パスフレーズ無、パスワード無でssh接続が可能である。

         ・resstatパッケージの配布
           自ノードと同じパス上のディレクトリに、resstatパッケージを配布しておく必要がある。

         ・実行要件
           「6. Installation Requirement」を満たす。
           また、sysstatバージョンが実行ノード間で同じであること。


         「実行要件」以外の条件を整える作業は単に面倒なだけで簡単なので、手作業で行いましょう。
         それでも面倒な作業がお嫌いな場合、お勧めはしませんがツールを用意してあります。
         お勧めしない理由は、パスワード入力を自動化する為にセキュリティ云々を無視したツールであり
         動作がやや不安定なスクリプトを使っているからです。利用は自己責任でお願いします。

         ◆コマンドラインからの実行
           <RESSTAT_HOME>/multisetup/bin/にあるシェルスクリプトを使います。

           # 実行スクリプト格納ディレクトリ移動
           $ cd <RESSTAT_HOME>/multisetup/bin/

           # 実行ユーザ自動作成
           $ ./multinode_useradd.sh {newuser_password} {root_password}

           # ssh公開鍵設定
           $ ./multinode_sshset.sh {user_password}

           # resstatパッケージ配布
           $ ./multinode_dist.sh


           multinode_useradd.shは、{root_password}でrootユーザにログインし、
           自ノードのカレントユーザと同じユーザを作成して、{newuser_password}を設定します。
           (つまり、起動対象ノード全てが同じ{root_password}でrootにログインできなければなりません)
           尚、ユーザ作成にはuseraddコマンドを使いますので、そのオプションを指定することが可能です。
           詳しくはmultinode_useradd.sh -hと実行してヘルプを参照してください。

           multinode_sshset.shは、自ノードのカレントユーザと同じユーザに{user_password}でログインし、
           カレントユーザのssh公開鍵（rsa形式）を配布登録します。
           （自ノードのカレントユーザと同じユーザが全ノードに存在し、{user_password}でログインできなければなりません）

           multinode_dist.shは、自ノードのresstatパッケージを全ノードの同じディレクトリに配布します。
           （自ノードのカレントユーザと同じユーザに、パスワード無でログインできる必要があります）

           すなわち、上の順番でスクリプトを実行すれば、問題なく作業完了します。

         ◆複数ノード起動条件セットアップの対話的ツールを使用する。
           <RESSTAT_HOME>/bin/management_tool.shを使用すると、管理ツールが起動します。
           CUIで対話的にユーザに実行を促しますので、その要求に従ってください。

           起動後は、「7. Monitoring User and SSH auto configure (Special Warning!)」を選択します。
           その後、
           「1. ユーザ作成」「2. SSH公開鍵配布」「3. resstatツール配布」のメニューを選択すれば、
           それぞれの機能が動作します。
           注意点はコマンドラインからの実行と同様です。
           
           全ての条件を整えた後、
           「2. 複数ノード一斉起動」を選択し、
           「u. MultiNode Lock | Mode: UnLock」を選択して複数ノード起動ロックを解除してください。


(1). start -- stop -- collect -- output

     ローカルノード起動時と同様、以下の順に起動することで1サイクルとなります。
     start   :  測定開始
     stop    :  測定終了（あるいは、起動時間が過ぎると自動的に終了）
     collect :  測定結果の収集
     output  :  測定結果の閲覧用zip出力

     start  -->  stopと実行後は、二回目の起動前にcollect  -->  outputも実行してください。

     ①. コマンドラインから実行する
         複数ノード一斉起動実行には、<RESSTAT_HOME>/bin/multictrl_resstat.shを使います。

         # 起動ディレクトリ
         $ cd <RESSTAT_HOME>/bin

         # start
         $ ./multictrl_resstat.sh start

         # stop
         $ ./multictrl_resstat.sh stop

         # collect
         $ ./multictrl_resstat.sh collect ../output/[任意のディレクトリ]

         # output
         $ ./multictrl_resstat.sh output ../output/[任意のディレクトリ]

         collectの引数には、全てのノードから収集したデータとグラフ画像を格納するディレクトリを指定します。
         推奨は<RESSTAT_HOME>/output/以下のディレクトリです。
         指定したディレクトリが存在しない場合自動作成します。
         また、outputには、collectで指定したディレクトリパスと同じパスを指定してください。

         outputの終了後、<RESSTAT_HOME>/archiveディレクトリに、
         パフォーマンスグラフ画像ファイルを圧縮したzipファイルが出力されています。
         (output実行時の標準出力の最後に、その名称が表示されます)
         Linuxデスクトップ環境やWindows端末などを使い、zipファイルを解凍して、
         その解凍後トップディレクトリに存在するindex.htmlを、画像表示可能なブラウザで閲覧してください。

     ②. resstat管理ツールを使って対話的に実行する
         <RESSTAT_HOME>/bin/management_tool.shを使用すると、管理ツールが起動します。
         CUIで対話的にユーザに実行を促しますので、その要求に従ってください。

         起動後は、
         「2. 複数ノード一斉起動」を選択し、
         「1. start」「2. stop」「3. collect and output」のメニューを選択すれば、
         それらの機能が動作します。（出力ディレクトリ等を変更せず、全てデフォルトのまま[y]と入力します）
         output終了後、<RESSTAT_HOME>/archiveディレクトリに
         zipファイルが作成されている点は変わりません。


(2). コンフィグレーション
     「(0). 準備」で起動間隔と最大起動時間を調整した他に、
     取得ダンプ/グラフ化の対象を調整することが可能です。（デフォルトでは、全てのグラフ化を有効にはしていません）

     基本的に、<RESSTAT_HOME>/conf/{SYSKBN}/command.confを変更すればよいでしょう。
     一度start機能を実行するか、あるいは「configure」機能（複数ノード）を使用していれば、
     このSYSKBN値は「linux」となり適切な値にリンクされるため、
     このファイルは<RESSTAT_HOME>/conf/linux/command.confとなりますので、このファイルを編集してください。
     逆に、初回起動前に編集する場合、必ずconfigure機能を使用してSYSKBN値を適切にセットしてから、作業を行ってください。
     （configure機能は、このファイルの「4 - (4) - ①. マシンに応じたConfigureと自動コンフィグ」を参照
     （command.confは、このファイルの「4 - (4) - ③. 実行コマンドとグラフ化対象の調整」を参照）

     複数ノード一斉起動をキックするノードで編集した後は、コンフィグファイルの複数ノード同期を行います。
     （「4 - (3). コンフィグファイルの複数ノード同期」を参照）


######################################################################
# 4. Functions
######################################################################

■resstatツールの機能について
  起動停止、グラフ化以外の機能（及び仕様の一部）について解説します。

(1). SYSKBN値
     <RESSTAT_HOME>/confと<RESSTAT_HOME>/documentsディレクトリには、
     そのノードにインストールされているsysstat及びprocsバージョンに応じたコンフィグを格納するディレクトリが存在します。
     このディレクトリ名は、<RESSTAT_HOME>/conf/resstat.confの「SYSKBN」値で定義されています。
     sysstatパッケージはバージョンによって出力項目やコマンドオプションが異なるため、それらを吸収するためです。
     標準値は「linux」となっています。

     resstatパッケージ展開後、「configure」機能を使用するか、
     一度startを実行すれば、この値は自動的に「linux」となり、
     ノードにインストールされているsysstatバージョンに応じて適切な値にシンボリックリンクされます。
     そのため、<RESSTAT_HOME>/conf/linuxを見れば、
     現在のノードが使用しているコンフィグの格納ディレクトリが解ります。

     ※「configure」機能は、後述する「(4) - ①. マシンに応じたConfigureと自動コンフィグ」を参照してください。


(2). データディレクトリクリア
     resstatツールは、startで開始した測定ダンプを<RESSTAT_HOME>/dataディレクトリに、
     出力用zipファイル等のアーカイブを<RESSTAT_HOME>/archiveディレクトリに、
     また、複数ノード一斉起動時のcollect推奨先として<RESSTAT_HOME>/outputディレクトリに格納します。

     これらのディレクトリ内容を一斉にクリアするには、「clear機能」を使います。

     ①. コマンドラインから実行する

         # 起動ディレクトリ
         $ cd <RESSTAT_HOME>/bin

         # 単独ノード起動時
         $ ./ctrlresstat.sh clear

         # 複数ノード一斉起動時
         $ ./multictrl_resstat.sh clear

     ②. resstat管理ツールを使って対話的に実行する
         <RESSTAT_HOME>/bin/management_tool.shを実行し、管理ツールを起動します。
         起動後は、「1. ローカルノード単独起動」又は「2. 複数ノード一斉起動」を選択して、
         「4. data directory clear」メニューを選択すれば、データディレクトリクリアが行えます。


(3). コンフィグファイルの複数ノード同期
     複数ノード一斉起動の機能を使用する際、resstatパッケージ配布を行った後に
     カレントノードの<RESSTAT_HOME>/confディレクトリ内のコンフィグファイルを修正しても、そのままでは全ノードに反映されません。
     単に修正したコンフィグファイルを全てのノードに配布すれば良いだけですが、
     <RESSTAT_HOME>/confディレクトリ直下のファイル及び<RESSTAT_HOME>/conf/{SYSKBN}ディレクトリ直下のファイルの全てを
     一斉起動ノードでカレントノードと同期する機能があります。

     ①. コマンドラインから実行する

         # 起動ディレクトリ
         $ cd <RESSTAT_HOME>/bin

         # confファイル同期
         $ ./multictrl_resstat.sh sync

     ②. resstat管理ツールを使って対話的に実行する
         <RESSTAT_HOME>/bin/management_tool.shを実行し、管理ツールを起動します。
         起動後は、「2. 複数ノード一斉起動」を選択して、
         「6. All and config files sync」メニューを選択すれば、confファイルが同期されます。


(4). グラフ化対象の調整
     このセクションでは、グラフを作成する対象を調整する方法を記述します。
     というのも、resstatツールの全機能を使用してグラフ化を行うと、グラフファイル数が膨大になるためです。
     興味のない情報はグラフ化しない様にすると、出力が軽くなります。
     また、resstatツールデフォルトでは、グラフ化可能な全ての項目をターゲットにしていませんので、
     ターゲットを加減するには、手動で調整してください。

     ただし、全ての機能を有効化すると、sysstat9.0.0以降の様に高機能なバージョンでは、
     startして1日も放っておけば簡単に1G近くのダンプファイルが出来上がります。
     ディスク容量には注意しましょう。


     ①. マシンに応じたConfigureと自動コンフィグ
         インストールされたマシンによって、CPUコア数、ネットワークインタフェース名、ブロックデバイス名といった
         ハードウェア情報が異なったり、
         インストールされているsysstatバージョンが異なる場合がありますが、
         その部分を吸収して環境に合わせる機能が「configure」機能です。

         この機能は、基本的に初めて「start」機能を起動する時に1度だけ呼び出されます。
         具体的には、<RESSTAT_HOME>/conf/resstat.confファイルの「AUTO_CONFIG」パラメータがONの場合に、
         start機能が起動する時点で自動的にconfigure機能が実行され、実行後はこのパラメータがOFFに変更されます。

         そのため、ほとんどの場合ユーザはこの機能の存在を意識する必要はありませんが、
         手動でパラメータを変更する場合には注意してください。

         <RESSTAT_HOME>/conf/resstat.confファイルで変更されるパラメータは、前述のAUTO_CONFIG及び以下の４つです。
         
         ・SYSKBN
         ・CPU_CORES
         ・NETWORK_INTERFACES
         ・BLOCK_DEVICES

         1. SYSKBN
            起動マシンにインストールされているsysstatパッケージバージョンとprocsパッケージバージョンから、
            自動的に判定します。この値は、<RESSTAT_HOME>/conf/ディレクトリにあるディレクトリ名と等しく、
            グラフ化を行う際に<RESSTAT_HOME>/conf/{SYSKBN}/配下のコンフィグファイルが参照されます。
            （後述の「②. conf/{SYSKBN}の調整」を参照）

            通常は、SYSKBNを「linux」と指定し、環境に合わせて正式なディレクトリへシンボリックリンクを貼る様にしています。
            （configure機能でも、このリンクのリンク先が変更されるだけです）

         2. CPU_CORES
            起動マシンのCPUコア名を取得して、全てのコアをグラフ化対象に設定します。
            mpstat、sar -uコマンドのグラフ化などに使用されます。

         3. NETWORK_INTERFACES
            起動マシンのネットワークインタフェース名を取得して、
            ループバックインタフェースを含む全てのインタフェースをグラフ化対象に設定します。
            sar -n系コマンドのグラフ化などに使用されます。

         4. BLOCK_DEVICES
            起動マシンのブロックデバイス名を取得して、全てのデバイスをグラフ化対象に設定します。
            iostat、sar -dコマンドのグラフ化などに使用されます。

         もし全ての情報をグラフ化する必要がない場合、これらパラメータを調整して
         グラフ化対象を減らすことができます。


         尚、「configure」機能はコマンドライン/resstat管理ツールから実行可能です。

         # 単独ノード起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./ctrlresstat.sh configure

         # 複数ノード起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./multictrl_resstat.sh configure
         
         resstat管理ツールを使って対話的に実行する場合は、
         <RESSTAT_HOME>/bin/management_tool.shを実行し、
         「1. ローカルノード単独起動」又は「2. 複数ノード一斉起動」に続いて、
         「5. auto configure for my host」メニューを選択します。


     ②. conf/{SYSKBN}の調整
         標準値は「linux」であり、sysstatバージョンに応じた値にリンクされますが、
         独自にグラフ化の定義を組み込む場合には、SYSKBNを手動で調整して参照するディレクトリを変更する、
         といったことが可能です。

         グラフ化定義の作成・調整方法は「④. グラフ化コンフィグファイルの手動調整」を参照してください。


     ③. 実行コマンドとグラフ化対象の調整
         start機能で実行されるコマンド及びグラフ化対象は、sysstatバージョン毎に
         <RESSTAT_HOME>/conf/{SYSKBN}/command.confで定義されています。
         1行に1コマンド名/グラフ対象で記述され、どのコマンドを実行/グラフ化対象とするかを管理しています。
         SYSKBN値に応じて実行/グラフ化可能な種類は全て記述されていますので、
         グラフ化の必要性に応じてコメントイン/アウトしてください。
         （先頭に#を入力すればコメント行とみなされます）


     ④. グラフ化コンフィグファイルの手動調整
         <RESSTAT_HOME>/conf/{SYSKBN}/ディレクトリには、ダンプファイル毎のグラフ化コンフィグファイルが格納されています。
         mpstat.conf、iostat.conf、sar_*.confなどの形式です。
         これらのファイルの中に、ダンプファイル中のどの項目をどういった形でグラフ化するかが定義されています。
         このコンフィグファイルはgnuplotコマンドでグラフ化することが前提となっており、
         グラフ化の形式が気に入らない場合はここで修正することが可能です。
         
         フォーマットは以下の通りです。
         
         ◆グラフ化コンフィグフォーマット
         
           ・空行無視。先頭#はコメントとみなして無視。
             別にデータ行の「No.」カラムが飛んでも問題なく、グラフ化したくないものは単純にコメントアウトすれば良い。
    
           ・先頭空白無視。
           
           ・半角スペースの連続を区切りとし、各行はカラム分割で認識されている。
             以下、各カラムを説明する。
           
             （サンプル行）
  
# No.     type           項目         directory     fname                  title               size        ti(凡例)   |ここまで固定|     xlabel(x軸ラベル)     ylabel(y軸ラベル)         y軸の範囲
  0       separator:cpu  column       directory     fname                  title               size        ti                            xlabel                ylabel                    yrange
  1       2              %user        cpu           cpu_pct                %CPU                960,720     %user                         "time"                "%CPU_USAGE"              [0:100]
  2       1              %nice        cpu           nice_pct               %nice_CPU           960,720     %nice                         "time"                "%nice_CPU"               [0:100]
  3       2              %sys         cpu           system_pct             %system_CPU         960,720     %system                       "time"                "%system_CPU"             [0:100]
  4       2              %iowait      cpu           iowait_pct             %iowait_CPU         960,720     %iowait                       "time"                "%iowait_CPU"             [0:100]
  5       1              %idle        cpu           idle_pct               %idle_CPU           960,720     %idle                         "time"                "%idle_CPU"               [0:100]

# mutiplot set
# No.       layout       size        directory    targetNo.       outputfile      title
  multi0    layout       size        directory    target          fname           title
  multi1    3,1          960,1440    cpu          1,2,3,4,5       cpu             cpu

           ◇No.：
            「0」がヘッダ行。
            それ以外の番号は意味を持っていない。見栄え上で番号を振っているのみ。

           ◇type
             ヘッダ行にはnormalか、separator:[type]を指定する。
             [type]は、network、cpu、sar_device、iostat_device、process、cprocess、tty、interruptsをサポートする。
             separatorは、ダンプファイルを分割してそれぞれグラフ化する場合に行う。
             つまり１レポートで複数の行（mpstat、iostat、sar -u -P ALLなど）を出力するタイプに使う。
             １レポート１行のグラフ化はnormalでよい。
             
             ヘッダ以外の行については、「1」か、「それ以外の数字」かで意味が異なる。
             1にすると、1項目1グラフ・線にする。
             2以降の数字は、同じ数字の項目を１グラフにまとめて複数線を引くようにする。
             また、「fl」を先頭に付加すると、100%積み上げ面グラフとして解析される（ただし、gnuplot4.2以降のみ）。
             複数線を引く場合、データ行の各項目は「最初の行」を元に決めるので注意。（グラフタイトル、ディレクトリ、ファイル名、サイズ。凡例は各行の内容を反映する）

           ◇column
             ダンプファイル内のグラフ化対象フィールド値。
             ダンプファイル内のヘッダ行にこのフィールドがあることを想定し、
             このフィールドのカラム値をプロットデータとして認識する。

           ◇directory
             グラフ画像ファイルの出力ディレクトリ名。
             途中に[/]を挟んだ場合、パス構造として認識する。

           ◇fname
             グラフ画像出力ファイル名。
    
           ◇title
             グラフタイトル。（グラフ画像の最上部に表示）

           ◇size
             グラフ画像のサイズ。8*6の整数倍が無難。

           ◇ti
             凡例の名称。

           ◇それ以降
             自由にいくつでも設定可能。gnuplotスクリプト中で、ヘッダの項目名でset {ヘッダ行名} {データ行値}と打ってセットする。
             各行でフォーマットさえあっていれば、gnuplotのsetに付けられるものを任意に受け付ける。
             データ行に「NONE」を指定する行はsetしない。
             尚、現在のところダブルクォーティングしても間に空白を挟めばカラムが分断されてしまうため、
             setの後に２カラム以上必要となる項目は設定できない。（後続バージョンで修正予定）

            □multiplot仕様
              gnuplotのmultiplot機能を使用して、複数のグラフを一つのファイルに纏める。
              使用出来るならなるべく使用すること。グラフ画像ファイル数が多くなりすぎるのを防ぐため。
              レイアウトを調節し、できるなら1ダンプファイルに対し全てのグラフを1画像化してしまうのが望ましい。
              
              実行にはgnuplot 4.2以上が必要となる。
              （multiplot自体はgnuplot4.2より以前のバージョンで使用可能だが、以下で使用している[layout]機能のためには4.2以上が必要となる）

            □No.
              multi0がヘッダ。
              multi1以降がデータ行。

            □layout
              画像ファイル内にどんなレイアウトでグラフを埋めるかを決定する。
              [縦,横]のフォーマットで、3,1だと、縦に３つ、横１つの幅でグラフ画像を置く。
             （gnuplot4.2からの機能で、これがないと位置決めが複雑になり、とてもconfigファイルでは書けなくなってしまう）

            □size
              グラフ画像のサイズ。通常のデータ行のsizeは無視される。

            □directory
              グラフ画像の出力ディレクトリ。通常のデータ行のdirectoryは無視する。

            □target
              通常データ行の内、どのグラフを１ファイルにまとめるかの[No.]カラム値を、[,]区切りで記述する。
              複数線を引くターゲットを選べばmultiplot上でも複数線グラフを作る。

              ただし、エラーチェック・矛盾チェックがスクリプト上で甘いので慎重に。
              （複数線を引く番号の全てを選ばない場合など）
              （後続バージョンでチェック修正予定）

            □fname
              グラフ画像出力ファイル名。通常データ行のfnameは無視。
    
            □title
              全体のタイトル。画像内の一つのグラフのタイトルは通常データ行を使う。

         ◆common.confについて
           このファイルでは全グラフ共通の設定を行いますが、
           現在はグラフ線の太さを定義しているのみです。
           太さを変えるが場合にはこのファイルの「linewidth」パラメータを変更してください。


     ⑤. プロセス情報、割り込み情報、端末情報の取得
         これらの情報は、デフォルトではダンプ取得とグラフ化がOFFとなっている項目です。

         start機能実行前にプロセスIDが判明していれば、そのプロセスIDの情報をグラフ化することが出来ます。
         また、IRQ番号を指定して、その割り込み情報の取得とグラフ化が可能です。
         rootユーザでの実行に限り、端末情報も取得可能です。

         <RESSTAT_HOME>/conf/resstat.confにおいて、プロセスIDはATTACH_PIDパラメータを
         割り込み情報はINTR_NUMBERパラメータを、端末情報はTTY_NUMBERパラメータをコメントインし、
         それぞれ取得したいプロセスID、IRQ番号、端末番号を指定します。

         ※カンマ区切りで複数のプロセスIDを指定することも可能ですが、
           sysstatバージョン8.1.8以降に限ります。

         また、デフォルトではグラフ化はOFFに設定されています。
         「③. グラフ化対象ダンプファイルの調整」を参照し、
         プロセスIDは「sar -x」「sar -X」（sysstatバージョン7.1.3以前）「pidstat」（sysstatバージョン7.1.4以降）、
         割り込み情報は「sar -I」、端末情報は「sar -y」のグラフ化を有効にするようコメントインしてください。

     ⑥. CPU使用率に対する100%積み上げ面グラフの使用
         <RESSTAT_HOME>/conf/resstat.confにおいて、CPU_USAGE_PATTERNパラメータを1に指定すると、
         CPU使用率のグラフが他のグラフとは異なり100%積み上げ面グラフで描画される。
         このパラメータはデフォルトで1（有効）になっているため、
         通常の折れ線グラフで出力したい場合には1以外の値を設定すること。

     ⑦. 参照用HTMLから除外
         <RESSTAT_HOME>/conf/{SYSKBN}/html_exclude.confに記述された画像ファイルは、
         output機能による参照用HTMLファイルにリンクが作成されなくなります。
         しかし、この機能を使うことはまずないでしょう。

     ⑧. gnuplotコマンドバージョン
         「④. グラフ化コンフィグファイルの手動調整」で述べたように、
         resstatツールにおけるmultiplot機能を使用するには、gnuplot 4.2以上が必要となります。
         また、CPU使用率の100%積み上げ面グラフにも同様のバージョンが必要です。
         gnuplotを新たにインストールした場合、ホストシステム独自のものとは別に２バージョン以上存在することになるかもしれません。
         そのような場合、<RESSTAT_HOME>/conf/graph.confファイルのGNUPLOT_CMDに、
         gnuplotコマンドの絶対パスを記述することで、そのパスに存在するgnuplotコマンドを優先して使用するようになります。
         これは、PATHを通さない場所にgnuplotコマンドを置く時でも同様に使用可能です。

         尚、gnuplotバージョンが4.1以下の場合でも、multiplotコンフィグは有効化されていて構いません。
         その場合はmultiplotの行を無視します。
         また、100%積み上げ面グラフは使用せず、他のグラフと同様に折れ線グラフを使います。


(5). start、collect、outputのファイル/ディレクトリの変更

     ①. start機能のディレクトリサフィックス
         start機能の出力ディレクトリは、デフォルトではdata/{ホスト名}_{YYYYMMDD_HH24MISS}です。
         この、{YYYYMMDD_HH24MISS}となる日付部分は、ユーザが指定可能です。
         コマンドラインからは、以下の様に行います。

         # 単独ノード起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./ctrlresstat.sh -d {任意の値} start

         # 複数ノード起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./multictrl_resstat.sh -d {任意の値} start

     ②. collect機能の収集対象ディレクトリ
         collect機能が収集する対象のディレクトリは、デフォルトではdata/{ホスト名}_で始まる
         最新のディレクトリです。
         この部分を明示する場合、以下のコマンドでdata/{ホスト名}_{任意の値}とすることができます。

         # 単独ノード起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./ctrlresstat.sh -d {任意の値} collect

         # 複数ノード起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./multictrl_resstat.sh -d {任意の値} collect {出力ディレクトリパス}

         また、単独ノード起動時に限り、-tオプションでディレクトリパスを直接指定できます。

         # 単独ノード起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./ctrlresstat.sh -t {収集対象ディレクトリパス} collect

         ※-t、-dの両方を指定した場合、-tの指定が優先されます。

     ③. output機能の入力/出力ディレクトリ
         output機能は、デフォルトではarchive/output_{ホスト名}_で始まる最新ファイルを対象とし、
         出力ディレクトリはarchiveとなります。
         これらは、入力ファイルを-fオプションで、出力ディレクトリを-dオプションで変更可能です。
         尚、複数ノード起動時は、各ノードのcollect結果を格納したディレクトリを必須で指定する為、
         入力に関するオプションはありません。

         # 単独ノード起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./ctrlresstat.sh -f {入力ファイルパス} -d {出力ディレクトリパス} output

         # 複数ノード起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./multictrl_resstat.sh -d {出力ディレクトリパス} output {入力ディレクトリパス}


(6). 複数ノード起動時のノード定義ファイル
     複数ノード一斉起動機能を使用する場合、
     デフォルトでは<RESSTAT_HOME>/conf/targethostに記述されているノード名を元に、対象ノードを決定します。
     
     このファイルは、<RESSTAT_HOME>/bin/multictrl_resstat.shや<RESSTAT_HOME>/bin/management_tool.shに、
     -f [ファイルパス]のオプションを付けて起動することで、
     別のファイルを読むよう指定することが可能です。

     [例]

         # コマンドライン起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./multictrl_resstat.sh -f {ノード記述ファイルパス} start

         # 対話的管理ツール起動時
         $ cd <RESSTAT_HOME>/bin
         $ ./management_tool.sh -f {ノード記述ファイルパス}


######################################################################
# 5. Trouble
######################################################################

not yet .....

######################################################################
# 6. Installation Requirement
######################################################################

※以下で必要とされるコマンドは、環境変数PATH上又は/sbin、/usr/sbinに存在すること。（zshのみ、PATH上に存在しなければならない）
  gnuplotのみ、<RESSTAT_HOME>/conf/graph.confファイルのGNUPLOT_CMDパラメータに指定してもよい。

(1). OS
     ・Linuxカーネルを含むディストリビューション
     ・Linuxカーネルのバージョンは、sysstatバージョンにも因るが、2.6.32以上が望ましい。
       ただし、sysstatバージョンが低い(7.X.X程度）なら、2.6.18で充分動作する。

     【注意】
       動作検証はRHEL系のディストリビューションでしか行っていません。
       Debian系でも動作しないことはないと思いますが。

(2). sysstatパッケージ
     7.0.2以上。7.0.1以下は未サポート。sar、mpstat、iostat、pidstatでシステムレポートのダンプを取る。
     出来る限り最新に近い方が良いが、カーネルバージョンとの噛み合わせに注意。
     バージョンが高いと、本来取得可能な項目もカーネルのバージョンによっては未サポートで取得できないことがある。

     また、このツールでサポートしているのは、sysstatの「Stable」バージョンのみです。
     sysstatの開発ステータスが「Development」となっているバージョンには対応していません。
     （下記sysstatのサイトを参照↓）
     http://sebastien.godard.pagesperso-orange.fr/download.html

     7.0.2～7.0.4、
     8.0.0～8.0.4、
     9.0.0～9.0.6、
     10.0.0～10.0.2
     上記に対応済。

     ※CentOSなどのデフォルトインストールでは、このパッケージは入りません。
       管理系のツールを確認してインストールするか、OSインストール後に手動で入れましょう。

(3). procsパッケージ
     3.2.7以上。vmstatに使用する。vmstatで特に出力項目や要求カーネルに変化が無い限り、どのバージョンでもよい。

(4). zsh
     出来る限りバージョン4.X.X系以上であることが望ましい。
     バージョン3系までは少しバグが残っているので不安。（尤も、zsh4系もかなりのバグらしき動作があるのだが）
     resstatスクリプトは全てzshでなければ動作しない。

     ※古いディストリビューションの場合zsh自体存在しないことがあります。その場合、手動で入れましょう。

(5). gnuplot
     出来る限りバージョン4.2.X系以上であることが望ましい。
     それ以下でも動作はするが、multiplotが使用不能となってしまうので、画像ファイル数が増加する。
     また、CPU使用率のグラフで、100%積み上げ面グラフでの出力ができなくなる。
     
     ※CentOSなどのデフォルトインストールでは、このパッケージは入りません。
       科学計算系のツールを確認してインストールするか、OSインストール後に手動で入れましょう。
       尚、ソースコードからビルドする場合、png画像のサポートを付けるようにしてビルドしてください。

(6). openssh
     複数ノード一斉起動機能を使用する場合に必要。
     ほとんどのディストリビューションでは、最小構成でもインストールされているでしょう。
     起動対象の全てのノードで、sshサーバが起動されている必要があります。

(7). その他必要コマンド/パッケージ

     ■デフォルトでインストールされていることが多いもの１（ディストロ次第だが、大抵は/binに存在する）
       ・awk
       ・sed
       ・grep
       ・cut
       ・tar
       ・cpio
       ・uname
       ・netstat
       ・cp
       ・cat
       ・ls
       ・mv
       ・mkdir
       ・rm
       ・chmod
       ・ps
       ・kill
       ・date

     ■デフォルトでインストールされていることが多いもの２（ほとんどの場合/usr/binに存在する）
       ・less
       ・find
       ・xargs
       ・zip
       ・bzip2
       ・whoami
       ・head
       ・tail
       ・wc
       ・nohup

     ■複数ノードセットアップ機能を使用する場合に必要となるもの
       ・expect
       ・useradd
       ・passwd
       ・sleep

       特にexpectに注意してください。
       デフォルトインストールでは入っていないディストリビューションが多いためです。

(8). 注意
     上記の外部コマンド/パッケージ以外、全てzshのビルドインコマンド/機能を使用しています。
     コーディング方針は、「出来る限り外部コマンドに頼らず、zshビルトイン機能をフル活用する」としたため、
     外部コマンドのバージョンよりzshのバージョンに気を遣ってください。動作確認したバージョンは正確にはzsh4.2系と4.3系です。

     ただし、これらのバージョンでもスクリプト記述においてzshは「奇妙な動作」をする（バグ？）ことがあるため、
     その点を意識したコードが含まれることがあります。
     後続バージョンで修正されていた場合にも多分影響はありませんが、
     最新すぎると動作に不具合が生じる可能性は捨てきれません。


######################################################################
# 7. Other Infomation
######################################################################

■スクリプトドキュメントについて
  全てのシェルスクリプトは、
  -hオプションを付けて引数なしで実行するとヘルプが出力されます。
  ユーザヘルプと仕様の記述となっていますので、必要に応じてご参照ください。

■パッケージディレクトリ構成
  
  resstat-X.X.X -------- archive
                     |--- bin
                     |--- conf
                     |--- data
                     |--- documents
                     |--- multisetup --- bin
                     |--- output
                     |--- proc_id
                     |--- work

    ・archive            : output機能で出力するzip圧縮ファイル作成先デフォルト。
    ・bin                : resstatツールの実行シェルスクリプト格納先。
    ・conf               : resstatツールコンフィグファイル格納先。
    ・data               : start機能で出力するステータスレポートダンプ作成先。
    ・documents          : 項目一覧などのドキュメント格納先。
    ・multisetup         : 複数ノード一斉起動の条件調整ツール格納先。
    ・multisetup --- bin : 複数ノード一斉起動条件調整ツールのシェルスクリプト格納先。
    ・output             : 複数ノード一斉起動のcollect機能による収集先デフォルト。
    ・proc_id            : 起動中のプロセスファイル格納先。
    ・work               : パッケージ配布のための作成領域。

######################################################################
# 8. Author
######################################################################

Name :
  yushin.hirano

Mail :
  yushin2494@gmail.com

Twitter :
  http://twitter.com/yushin_hirano
  @yushin_hirano



