#!/usr/bin/env zsh
########################################
# function UsageMsg
########################################
function UsageMsg(){
    cat <<-EOF
    
	Usage : management_setup.sh
	        
	        management_setup.sh [ [34;1m-f hostsfile[m ]
	        management_setup.sh [ [34;1m-h[m ]
	
	EOF

}

########################################
# function HelpMsg
########################################
function HelpMsg(){
    #PAGERÂ§âÊï∞„ÅØÊâãÂãï„Åß„Çª„ÉÉ„Éà„ÄÇ„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØresstat package„Å®„ÅØÁã¨Á´ã„Åó„Å¶„ÅÑ„Çã„ÄÇ
    PAGER="/usr/bin/less -RFX"
    export LC_ALL=ja_JP.utf8
    case "`uname`" in
        CYGWIN*) 
            export PAGER="/usr/bin/less -FX"
            ;;
    esac

    if [[ -s "${VERSION_TXT::=${CURRENT_SCRIPT%/*}/../../VERSION}" ]];then
        RESSTAT_VERSION=$(awk -F ' *= *' '(NF > 0){if ($1 == "VERSION") { print $2; exit; } }' "${VERSION_TXT}")
        RESSTAT_AUTHOR=$(awk -F ' *= *' '(NF > 0){if ($1 == "AUTHOR") { print $2; exit; } }' "${VERSION_TXT}")
        RESSTAT_REPORT_TO=$(awk -F ' *= *' '(NF > 0){if ($1 == "REPORT_TO") { print $2; exit; } }' "${VERSION_TXT}")
        RESSTAT_LASTUPDATE=$(awk -F ' *= *' '(NF > 0){if ($1 == "LAST_UPDATE") { print $2; exit; } }' "${VERSION_TXT}")
    fi

    ${=PAGER} <<-EOF
	
	
	[32;1;4m#### resstat package manual ####[m
	
	
	[36;1mUsage: management_tool.sh [m  -- resstatË§áÊï∞Ëµ∑Âãï„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂØæË©±ÁöÑÂÆüË°å„ÉÑ„Éº„É´
	
	       management_setup.sh [ [34;1m-f hostsfile[m ]
	       management_setup.sh [ [34;1m-h[m ]
	
	
	[36;1m[Options] : [m

	       [34;1m-f[m : Ëµ∑ÂãïÂØæË±°„Éé„Éº„ÉâË®òËø∞„Éï„Ç°„Ç§„É´„ÇíÊåáÂÆö„Åô„Çã„ÄÇ
	
	       [34;1m-h[m : „Éò„É´„Éó
	
	
	[36;1m[Overview] : [m
	
	       resstat„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆË§áÊï∞„Éé„Éº„ÉâËµ∑ÂãïÊù°‰ª∂„Å´„Å§„ÅÑ„Å¶„ÄÅ
	       Êù°‰ª∂„ÇíÊ∫Ä„Åü„Åô„Åü„ÇÅ„ÅÆ‰ΩúÊ•≠Ë≤†ÊãÖ„ÇíËªΩÊ∏õ„Åô„Çã„ÉÑ„Éº„É´ÂÆüË°åÂÖ•Âäõ„ÇíÂØæË©±ÁöÑ„Å´‰øÉ„Åô„ÄÇ
	       
	       „Åì„ÅÆ„ÉÑ„Éº„É´„Åß„ÅØ„ÄÅÂêÑÊ©üËÉΩ„Å´Âøú„Åò„Å¶‰ª•‰∏ã„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÇíÂëº„Å≥Âá∫„Åô„ÄÇ
	       Ôºà„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÊ©üËÉΩÂëº„Å≥Âá∫„ÅóÈ†Ü„ÇÇ„ÄÅ„Åì„ÅÆÈ†ÜÁï™„ÅßË°å„ÅÜ„Åì„Å®„ÇíÊÉ≥ÂÆö„Åó„Å¶„ÅÑ„Çã„ÅÆ„Åß„ÄÅ
	         ‰ª•‰∏ã„ÅÆÈ†Ü„Å´Âæì„Å£„Å¶ÈÄ≤„ÇÅ„Çã„Åì„Å®Ôºâ
	       
	       „ÉªË§áÊï∞„Éé„Éº„Éâ„É¶„Éº„Ç∂‰ΩúÊàê
	         [33;1mmultisetup/bin/multinode_useradd.sh[m
	       
	       „ÉªÂÖ¨ÈñãÈçµÊé•Á∂öË®≠ÂÆö
	         [33;1mmultisetup/bin/multinode_sshset.sh[m
	       
	       „Éªresstat„Éë„ÉÉ„Ç±„Éº„Ç∏ÈÖçÂ∏É
	         [33;1mmultisetup/bin/multinode_dist.sh[m
	       
	       „Åæ„Åü„ÄÅ„Ç™„Éó„Ç∑„Éß„É≥„ÅßÊåáÂÆö„Åó„Å™„ÅÑÈôê„Çä„ÄÅ
	       ÂØæË±°„Éé„Éº„ÉâË®òËø∞„Éï„Ç°„Ç§„É´„ÅØconf/targethost„Çí‰ΩøÁî®„Åô„Çã„ÄÇ
	       „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆ1Ë°å„Çí1„Éé„Éº„ÉâÂêç„Å®„Åó„Å¶Ë™çË≠ò„Åô„Çã„ÄÇ
	       ÔºàÁ©∫Ë°å„ÄÅÂÖàÈ†≠[#]„ÅØ„Ç≥„É°„É≥„ÉàË°å„Å®„Åó„Å¶Ë™≠„ÅøÈ£õ„Å∞„ÅôÔºâ
	       
	       Â∞ö„ÄÅresstat„Éë„ÉÉ„Ç±„Éº„Ç∏ÈÖçÂ∏É„ÇíÈô§„Åç„ÄÅ
	       ÂØæË±°„Éé„Éº„ÉâË®òËø∞„Éï„Ç°„Ç§„É´„Çí„Ç™„Éó„Ç∑„Éß„É≥ÊåáÂÆö„ÅßÂ§â„Åà„Çå„Å∞
	       „Åì„ÅÆ„Éë„ÉÉ„Ç±„Éº„Ç∏Â§ñ„Åß„ÇÇÂãï‰Ωú„Åô„Çã„ÄÇ


	[31;1m[Caution] : [m
	
	       [35;1mÔºëÔºéËµ∑ÂãïÈ†ÜÁï™[m
	           „É°„Éã„É•„ÉºÁï™Âè∑„Å´„Åä„ÅÑ„Å¶„ÄÅ„ÄåÔºë‚áíÔºí‚áíÔºì„Äç„ÅÆÈ†Ü„ÅßËµ∑Âãï„Åô„Çã„Åì„Å®„ÅåÊúõ„Åæ„Åó„ÅÑ„ÄÇ
	           „Å§„Åæ„Çä„ÄÅ„Äå„É¶„Éº„Ç∂‰ΩúÊàê„Äç„ÄåÂÖ¨ÈñãÈçµÊé•Á∂öË®≠ÂÆö„Äç„Äå„Éë„ÉÉ„Ç±„Éº„Ç∏ÈÖçÂ∏É„Äç„ÅÆÈ†Ü„Åß„ÅÇ„Çã„ÄÇ
	           ÔºàÂÖ¨ÈñãÈçµË®≠ÂÆö„Å®„Éë„ÉÉ„Ç±„Éº„Ç∏ÈÖçÂ∏ÉÂâç„Å´„É¶„Éº„Ç∂‰ΩúÊàê„ÅåÂøÖË¶Å„Å™„ÅÆ„ÅØËá™Êòé„Å†„Çç„ÅÜ„ÄÇ
	             „Éë„ÉÉ„Ç±„Éº„Ç∏ÈÖçÂ∏É„ÅØÂÖ¨ÈñãÈçµÊé•Á∂öË®≠ÂÆö„ÅåÂøÖË¶Å„Å®„Å™„Å£„Å¶„ÅÑ„ÇãÔºâ
	           „Åæ„Åü„ÄÅÂêÑ„Éé„Éº„Éâ„Åß„Äå„ÅÇ„Çã„Éé„Éº„Éâ„ÅØÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Çã„Äç„Å®„ÅÑ„ÅÜÊßò„Å™Â†¥Âêà„Å´„ÅØ
	           Âãï‰Ωú‰∏≠„Å´Ë≠¶Âëä„ÇÑ„Ç®„É©„Éº„Åå‰∏ä„Åå„Çã„ÅÆ„ÅßÊ≥®ÊÑè„ÄÇ
	           Ôºà„É¶„Éº„Ç∂‰ΩúÊàêÊôÇ„Å´„ÄÅ„ÅÇ„Çã„Éé„Éº„Éâ„Å´„ÅØÊó¢„Å´„Åù„ÅÆ„É¶„Éº„Ç∂„ÅåÂ≠òÂú®„Åó„Å¶„ÅÑ„Åü„Çä„ÄÅ
	             ÂÖ¨ÈñãÈçµË®≠ÂÆöÊôÇ„Å´„ÅÇ„Çã„Éé„Éº„Éâ„ÅØÊó¢„Å´Ë®≠ÂÆöÊ∏à„Åø„Åß„ÅÇ„ÇãÂ†¥Âêà„Å™„Å©Ôºâ
	       
	       [35;1mÔºíÔºéÂ∞èË®Ä[m
	           „Åì„Çå„ÅØ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÇíÂÆåÂÖ®„Å´ÁÑ°Ë¶ñ„Åó„Åü„ÉÑ„Éº„É´Áæ§„Åß„Åô„ÄÇ
	           ÊâãÂãï„ÅßÁí∞Â¢ÉË®≠ÂÆö„Åó„Å¶„ÇÇÂïèÈ°å„Å™„ÅÑ„Å™„Çâ„ÄÅÊâãÂãï„ÅßË°å„ÅÜ„Åπ„Åç„Åß„Åô„ÄÇ
	           [31;1m„Å§„Åæ„Çã„Å®„Åì„Çç„ÄÅ„Åß„Åç„Çå„Å∞‰Ωø„Çè„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ[m
	
	
	[36;1m[Related ConfigFiles] : [m
	        
	        „Éªconf/targethost
	
	
	[36;1m[Author & Copyright] : [m
	        
	        resstat version ${RESSTAT_VERSION}.
	        
	        Author : Written by ${RESSTAT_AUTHOR}.
	        
	        Report bugs to <${RESSTAT_REPORT_TO}>.
	        
	        Release : ${RESSTAT_LASTUPDATE}.
	
	
	EOF

}


########################################
# function ContinueInput
########################################
function ContinueInput(){
    echo -e "\n\n[ Please input ENTER to continue ..... ]\c"
    read
}

########################################
# function PrintTargetHost
########################################
function PrintTargetHost(){
    local NODES
    local TOP=0
    
    # ÂÖàÈ†≠#„ÇíÈô§„ÅÑ„Å¶targethost„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
    for NODES in ${${(@f)"$(<${TG_HOSTS_FILE})"}:#[#]*}
    do
        if [[ ${TOP} -eq 0 ]];then
            echo -e "  ----  TARGET  : ${NODES}"
            TOP=1
        else 
            echo -e "  ----          : ${NODES}"
        fi
    done
    
    # TODO ÂØæË±°„Éé„Éº„Éâ„ÅåÂ§ö„ÅÑÂ†¥Âêà„ÄÅ„Åì„ÅÆË®òËø∞„Åß„ÅØ„ÅÑ„Åï„Åï„Åã‰∏ç‰æø„ÄÇ„ÅÇ„ÇãÁ®ãÂ∫¶„ÅÆÊñáÂ≠óÊï∞„Åæ„ÅßÊ®™„Å´‰∏¶„Åπ„Çã„Åì„Å®„ÇíÊ§úË®é„Åô„Çã„ÄÇ
    #      „Éª„Éª„Éª„Å®„ÅÑ„Å£„Å¶„ÇÇÁ´ØÊú´„ÅÆÈï∑„Åï„Çí„ÅÑ„Å°„ÅÑ„Å°Ê∏¨„Å£„Åü„ÇäÁ´ØÊú´Èï∑„ÅïÂ§âÂåñ„ÅÆ„Ç∑„Ç∞„Éä„É´„Éè„É≥„Éâ„É´„ÇÇÈù¢ÂÄí„Å™„ÅÆ„Åß„ÄÅÂÑ™ÂÖàÂ∫¶„ÅØ‰Ωé„ÅÑ„ÄÇ
    #      „Åù„Åì„Åæ„Åß„ÇÑ„Çã„Å™„Çâ„ÇÑ„Å£„Å¶„ÇÇ„ÅÑ„ÅÑ„Åå„ÄÅ„Åù„ÇåË®Ä„ÅÑ„Å†„Åô„Å®ÂÖ®‰Ωì„ÅÆ„É¨„Ç§„Ç¢„Ç¶„Éà„ÇÇÂ§âÊõ¥„Å´„Å™„Çã„ÅÆ„Åß„ÄÅ„Å°„Çá„Å£„Å®„Åç„Çä„ÅåÁÑ°„ÅÑ„ÄÇ
    
}


########################################
# function OpenMainMenu
########################################
function OpenMainMenu(){
    local SELECT_BUFF
    
    while :
    do
        clear
        echo -e ''
        echo -e ''
        echo -e '############################################################'
        echo -e '## '
        echo -e '## resstat SPECIAL DANGEROUS tool MainMenu'
        echo -e '## '
        echo -e '##    please select command No.'
        echo -e '## '
        echo -e '############################################################'
        echo -e ''
        echo -e ''
        echo -e '    -- Ë§áÊï∞„Éé„Éº„ÉâËµ∑ÂãïÊù°‰ª∂Ë™øÊï¥„ÉÑ„Éº„É´„É°„Ç§„É≥„É°„Éã„É•„Éº --    '
        echo -e ''
        echo -e '      1. „É¶„Éº„Ç∂‰ΩúÊàê     : '"${MYUSER}"
        echo -e '      2. SSHÂÖ¨ÈñãÈçµÈÖçÂ∏É'
        echo -e '      3. resstat„ÉÑ„Éº„É´ÈÖçÂ∏É'
        echo -e ''
        echo -e '      q. QUIT'
        echo -e ''
        echo -e " \$\$\$ input command code. [1-3q] >\c"
        
        while :
        do
            read -k 1 SELECT_BUFF
            if [[ -n "${${(@f)SELECT_BUFF}:# }"  ]];then
                case "${SELECT_BUFF}" in
                "1")
                    OpenUserAddMenu
                    RETVAL=$?
                    break 1
                    ;;
                "2")
                    OpenSSHSetMenu
                    RETVAL=$?
                    break 1
                    ;;
                "3")
                    OpenDistMenu
                    RETVAL=$?
                    break 1
                    ;;
                "q")
                    return ${RET_QUIT}
                    ;;
                *)
                    echo -e "\nplease input correct code\n"
                    ;;
                esac
                
            fi
            echo -e " \$\$\$ input command code. [1-3q] >\c"
        done
        if [[ ${RETVAL} -eq ${RET_QUIT} ]];then
            return ${RET_QUIT}
        elif [[ ${RETVAL} -eq ${RET_BACK} ]];then
            continue
        fi
        
        # Ê≠£Â∏∏ÁµÇ‰∫Ü„Åó„Å¶„É™„Çø„Éº„É≥„Åó„ÅüÂ†¥Âêà„Å´„ÅØContinueÂâç„Å´‰∏ÄÂëºÂê∏ÁΩÆ„Åè„ÄÇ
        ContinueInput
    done
}



########################################
#
# function OpenUserAddMenu
#
#    „É¶„Éº„Ç∂‰ΩúÊàê„É°„Ç§„É≥Âá¶ÁêÜ
#
########################################
function OpenUserAddMenu(){
    local SELECT_BUFF
    local ROOT_PASSWD="rootroot"
    local NEW_PASSWD="monitor"
    local USERADD_OPTIONS
    
    while :
    do
        clear
        echo -e "\n"
        echo -e ''
        echo -e '  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
        echo -e '  ----  „É¶„Éº„Ç∂Ëá™Âãï‰ΩúÊàê config  '
        echo -e '  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
        echo -e ''
        echo -e "      ‚ñ†„Ç´„É¨„É≥„Éà„É¶„Éº„Ç∂„Å®Âêå„Åò„É¶„Éº„Ç∂„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇ[${MYUSER}]"
        echo -e ''
        echo -e "      „É´„Éº„Éà„É¶„Éº„Ç∂„Éë„Çπ„ÉØ„Éº„Éâ          : [${ROOT_PASSWD}]"
        echo -e "      ‰ΩúÊàê„Åô„Çã„É¶„Éº„Ç∂„ÅÆ„Éë„Çπ„ÉØ„Éº„Éâ      : [${NEW_PASSWD}]"
        echo -e "      useradd„Ç≥„Éû„É≥„Éâ„Ç™„Éó„Ç∑„Éß„É≥ÊñáÂ≠óÂàó : [${USERADD_OPTIONS}]"
        echo -e ''
        echo -e '      y. OK'
        echo -e '      r. modify input root password'
        echo -e '      u. modify input new user password'
        echo -e '      o. modify input useradd command option string'
        echo -e ''
        echo -e '      b. back'
        echo -e '      q. QUIT'
        echo -e ''
        echo -e " \$\$\$ please input command code [yruobq] >\c"
        
        while :
        do
            # zsh„Åß„ÅØ-k
            read -k 1 SELECT_BUFF
            if [[ -n "${${(@f)SELECT_BUFF}:# }"  ]];then
                case "${SELECT_BUFF}" in
                "y")
                    break 2
                    ;;
                "r")
                    INPUT_BUFF=""
                    StringInput "please input root password"
                    RETVAL=$?
                    if [[ ${RETVAL} -eq ${RET_QUIT} ]];then
                        return ${RETVAL}
                    elif [[ ${RETVAL} -eq ${RET_BACK} ]];then
                        break 1
                    fi
                    ROOT_PASSWD="${INPUT_BUFF}"
                    break 1
                    ;;
                "u")
                    INPUT_BUFF=""
                    StringInput "please input new user password"
                    RETVAL=$?
                    if [[ ${RETVAL} -eq ${RET_QUIT} ]];then
                        return ${RETVAL}
                    elif [[ ${RETVAL} -eq ${RET_BACK} ]];then
                        break 1
                    fi
                    NEW_PASSWD="${INPUT_BUFF}"
                    break 1
                    ;;
                "o")
                    INPUT_BUFF=""
                    StringInput "please input useradd command option string"
                    RETVAL=$?
                    if [[ ${RETVAL} -eq ${RET_QUIT} ]];then
                        return ${RETVAL}
                    elif [[ ${RETVAL} -eq ${RET_BACK} ]];then
                        break 1
                    fi
                    USERADD_OPTIONS="${INPUT_BUFF}"
                    break 1
                    ;;
                "b")
                    return ${RET_BACK}
                    ;;
                "q")
                    return ${RET_QUIT}
                    ;;
                *)
                    echo -e "\nplease input correct code\n"
                    ;;
                esac
                
            fi
            echo -e " \$\$\$ please input command code [yruobq] >\c"
        done
    done
    
    #### multi-useradd shell execute ####
    
    while :
    do
        echo -e "\n"
        echo -e ''
        echo -e '  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
        echo -e '  --------- $$ AUTO user adding  input confirm $$ ---------'
        PrintTargetHost
        echo -e '  ----'
        echo -e "  ----  COMMAND                         : multinode_useradd"
        echo -e "  ----  ROOT PASSWORD                   : ${ROOT_PASSWD}"
        echo -e "  ----  NEW USER NAME                   : ${MYUSER}"
        echo -e "  ----  NEW USER PASSWORD               : ${NEW_PASSWD}"
        echo -e "  ----  [useradd] COMMAND OPTION STRING : ${USERADD_OPTIONS}"
        echo -e '  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
        echo -e ''
        echo -e " \$\$\$ above command take OK ? [yn] >\c"
        
        while :
        do
            read -k 1 SELECT_BUFF
            if [[ -n "${${(@f)SELECT_BUFF}:# }"  ]];then
                case "${SELECT_BUFF}" in
                "y")
                    echo -e ''
                    if [[ -n "${USERADD_OPTIONS}" ]];then
                        "${MULTI_USERADD_SH}" -f "${TG_HOSTS_FILE}" -o "${USERADD_OPTIONS}" "${NEW_PASSWD}" "${ROOT_PASSWD}"
                    else 
                        "${MULTI_USERADD_SH}" "${NEW_PASSWD}" "${ROOT_PASSWD}" "${TG_HOSTS_FILE}"
                    fi
                    echo -e "\n  executed auto-useradd ..... \n"
                    
                    return ${RET_OK}
                    ;;
                "n")
                    echo -e ''
                    echo -e "\n  cancel auto-useradd ..... \n"
                    return ${RET_OK}
                    ;;
                *)
                    echo -e "\nplease input correct code\n"
                    ;;
                esac
                
            fi
            echo -e " \$\$\$ above command take OK ? [yn] >\c"
        done
    done

}



########################################
#
# function OpenSSHSetMenu
#
#    SSHÂÖ¨ÈñãÈçµË®≠ÂÆö„É°„Ç§„É≥Âá¶ÁêÜ
#
########################################
function OpenSSHSetMenu(){
    local SELECT_BUFF
    local USER_PASSWD="monitor"
    local USERADD_OPTIONS
    
    while :
    do
        clear
        echo -e "\n"
        echo -e ''
        echo -e '  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
        echo -e '  ----  SSHÂÖ¨ÈñãÈçµËá™ÂãïË®≠ÂÆö config  '
        echo -e '  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
        echo -e ''
        echo -e "      [${MYUSER}]„É¶„Éº„Ç∂„Éë„Çπ„ÉØ„Éº„Éâ       : [${USER_PASSWD}]"
        echo -e ''
        echo -e '      y. OK'
        echo -e '      u. modify input set-user password'
        echo -e ''
        echo -e '      b. back'
        echo -e '      q. QUIT'
        echo -e ''
        echo -e " \$\$\$ please input command code [yubq] >\c"
        
        while :
        do
            # zsh„Åß„ÅØ-k
            read -k 1 SELECT_BUFF
            if [[ -n "${${(@f)SELECT_BUFF}:# }"  ]];then
                case "${SELECT_BUFF}" in
                "y")
                    break 2
                    ;;
                "u")
                    INPUT_BUFF=""
                    StringInput "please input set-user password"
                    RETVAL=$?
                    if [[ ${RETVAL} -eq ${RET_QUIT} ]];then
                        return ${RETVAL}
                    elif [[ ${RETVAL} -eq ${RET_BACK} ]];then
                        break 1
                    fi
                    USER_PASSWD="${INPUT_BUFF}"
                    break 1
                    ;;
                "b")
                    return ${RET_BACK}
                    ;;
                "q")
                    return ${RET_QUIT}
                    ;;
                *)
                    echo -e "\nplease input correct code\n"
                    ;;
                esac
                
            fi
            echo -e " \$\$\$ please input command code [yubq] >\c"
        done
    done
    
    #### multi-SSHset shell execute ####
    
    while :
    do
        echo -e "\n"
        echo -e ''
        echo -e '  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
        echo -e '  --------- $$ AUTO SSH setting input confirm $$ ---------'
        PrintTargetHost
        echo -e '  ----'
        echo -e "  ----  COMMAND           : multinode_sshset"
        echo -e "  ----  SET-USER NAME     : ${MYUSER}"
        echo -e "  ----  SET-USER PASSWORD : ${USER_PASSWD}"
        echo -e '  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
        echo -e ''
        echo -e " \$\$\$ above command take OK ? [yn] >\c"
        
        while :
        do
            read -k 1 SELECT_BUFF
            if [[ -n "${${(@f)SELECT_BUFF}:# }"  ]];then
                case "${SELECT_BUFF}" in
                "y")
                    echo -e ''
                    "${MULTI_SSHSET_SH}" -f "${TG_HOSTS_FILE}" -k "${USER_PASSWD}"
                    echo -e "\n  executed auto-sshset ..... \n"
                    
                    return ${RET_OK}
                    ;;
                "n")
                    echo -e ''
                    echo -e "\n  cancel auto-sshset ..... \n"
                    return ${RET_OK}
                    ;;
                *)
                    echo -e "\nplease input correct code\n"
                    ;;
                esac
                
            fi
            echo -e " \$\$\$ above command take OK ? [yn] >\c"
        done
    done

}

########################################
#
# function OpenDistMenu
#
#    perstat„ÉÑ„Éº„É´ÈÖçÂ∏É„É°„Éã„É•„Éº
#
########################################
function OpenDistMenu(){
    local SELECT_BUFF
    
    #### multi-dist shell execute ####
    
    while :
    do
        echo -e "\n"
        echo -e ''
        echo -e '  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
        echo -e '  --------- $$ AUTO resstat distribution confirm $$ ---------'
        PrintTargetHost
        echo -e '  ----'
        echo -e "  ----  COMMAND : multinode_dist"
        echo -e "  ----  DIST    : [$MYHOST]'s this package directory"
        echo -e '  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
        echo -e ''
        echo -e " \$\$\$ above command take OK ? [yn] >\c"
        
        while :
        do
            read -k 1 SELECT_BUFF
            if [[ -n "${${(@f)SELECT_BUFF}:# }"  ]];then
                case "${SELECT_BUFF}" in
                "y")
                    echo -e ''
                    "${MULTI_DIST_SH}" -f "${TG_HOSTS_FILE}"
                    echo -e "\n  executed multi_dist ..... \n"
                    
                    return ${RET_OK}
                    ;;
                "n")
                    echo -e ''
                    echo -e "\n  cancel multi_dist ..... \n"
                    return ${RET_OK}
                    ;;
                *)
                    echo -e "\nplease input correct code\n"
                    ;;
                esac
                
            fi
            echo -e " \$\$\$ above command take OK ? [yn] >\c"
        done
    done

}


########################################
# 
# function StringInput
# 
#    ÊñáÂ≠óÂàóÂÖ•Âäõ„Çí„É¶„Éº„Ç∂„Å´‰øÉ„Åó„ÄÅ„Åù„ÅÆÁµêÊûú„Çí
#    „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„ÉàÂÜÖ„ÅÆ„Çπ„Çø„ÉÜ„Ç£„ÉÉ„ÇØ„Å™Â§âÊï∞„ÄåINPUT_BUFF„Äç„Å´Ê†ºÁ¥ç„Åó„Å¶Ëøî„Åô„ÄÇ
#
#    Á¨¨‰∏ÄÂºïÊï∞„ÅØÊñáÂ≠óÂàóÂÖ•Âäõ„Çí‰øÉ„ÅôÂâç„Å´echo„Åô„ÇãË™òÂ∞éÊñáÂ≠óÂàó„ÄÇ
#
########################################
function StringInput(){
    local ECHO_MESSAGE="$1"
    local SELECT_BUFF
    
    while :
    do
        clear
        echo -e "\n"
        echo -e ''
        echo -e ''
        echo -e '    ==============================================='
        echo -e '    ========  $$ input String and Enter $$ ========'
        echo -e '    ==============================================='
        echo -e ''
        echo -e " \$\$\$ ${ECHO_MESSAGE} >\c"
        
        
        while :
        do
            read SELECT_BUFF
            if [[ -n "${SELECT_BUFF}" ]];then
                INPUT_BUFF="${SELECT_BUFF}"
                break
            fi
            echo -e " \$\$\$ ${ECHO_MESSAGE} >\c"
        done
        
        echo -e "\n"
        echo -e ''
        echo -e '    ================================='
        echo -e '    ========  input confirm  ========'
        echo -e '    ================================='
        echo -e ''
        echo -e "      input  value [${INPUT_BUFF}]"
        echo -e ''
        echo -e '      y. OK'
        echo -e '      n. No and RE:input'
        echo -e ''
        echo -e '      b. back and input cancel'
        echo -e '      q. QUIT'
        echo -e ''

        echo -e " \$\$\$ above input OK ? [ynbq] >\c"
    
        while :
        do
            read -k 1 SELECT_BUFF
            if [[ -n "${${(@f)SELECT_BUFF}:# }"  ]];then
                case "${SELECT_BUFF}" in
                "y")
                    return ${RET_OK}
                    ;;
                "n")
                    INPUT_BUFF=""
                    break 1
                    ;;
                "b")
                    INPUT_BUFF=""
                    return ${RET_BACK}
                    ;;
                "q")
                    INPUT_BUFF=""
                    return ${RET_QUIT}
                    ;;
                *)
                    echo -e "\nplease input correct code\n"
                    ;;
                esac
            fi
            echo -e " \$\$\$ above input OK ? [ynbq] >\c"
        done

    done


}


########################################
#
# multinode_config_cui.sh
# (zsh„Çπ„ÇØ„É™„Éó„Éà)
# ÈÄî‰∏≠„Åß„Ç≠„É¨„Å¶zshÁâπÊúâÊ©üËÉΩ„Çí‰Ωø„Å£„Å¶„Åæ„Åô„ÄÇ
# „Å™„Åú„Å™„Çâ„ÄÅbash„Å®zsh„Åßread„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥Âêç„ÅåÂ§â„Çè„Å£„Å¶„Åó„Åæ„ÅÑ„ÄÅ„ÇÇ„ÅØ„ÇÑ‰∫íÊèõÊÄß„Çí‰øù„Å¶„Å™„Åè„Å™„Å£„Åü„Åü„ÇÅ„ÄÇ
# (dd„Ç≥„Éû„É≥„Éâ„Å®termÂà∂Âæ°„Çí‰Ωø„Åà„Å∞Âá∫Êù•„Å™„Åè„ÇÇ„Å™„ÅÑ„Åå„ÄÅbsh„Åò„ÇÉ„ÅÇ„Çã„Åæ„ÅÑ„ÅóÊ†ºÂ•ΩÊÇ™„ÅÑ„ÅÆ„ÅßÂç¥‰∏ã)
#
# [Ê¶ÇË¶Å]
#    resstatË§áÊï∞„Éé„Éº„Éâ‰∏ÄÊñâËµ∑ÂãïÊù°‰ª∂Ë™øÊï¥„ÉÑ„Éº„É´„ÉªÂØæË©±ÁöÑ„É¶„Éº„Ç∂„Ç§„É≥„Çø„Éï„Çß„Éº„Çπ
# [Ëµ∑ÂãïÊù°‰ª∂„ÄÅ‰ªïÊßò]
# [ÂºïÊï∞]
#    UsageMsg()„ÄÅHelpMsg()ÂèÇÁÖß„ÄÇ
#
#    resstat/bin„Å´Â≠òÂú®„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà„Å®„ÅØÂü∫Êú¨ÁöÑ„Å´Áã¨Á´ã„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
#
# [Caution]
#    „Éª„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂÆåÂÖ®ÁÑ°Ë¶ñ„ÄÇ
#    „Éª‰Ωø„Çè„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ
#
########################################

#Èùû„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞

#Èùû„Ç∑„Ç∞„Éä„É´„Éè„É≥„Éâ„É™„É≥„Ç∞

#„Çπ„ÇØ„É™„Éó„ÉàÂÆüË°åÂêçÈÄÄÈÅø
CURRENT_SCRIPT="$0"


########################################
# „Ç™„Éó„Ç∑„Éß„É≥/ÂºïÊï∞Ë®≠ÂÆö
########################################
BIN_PWD=($(cd ${0%/*};pwd))

# Ëµ∑ÂãïÂØæË±°„Éé„Éº„ÉâË®òËø∞„Éï„Ç°„Ç§„É´„Éá„Éï„Ç©„É´„Éà
TG_HOSTS_FILE="${BIN_PWD}/../../conf/targethost"

# „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥„Ç™„Éó„Ç∑„Éß„É≥„ÉÅ„Çß„ÉÉ„ÇØ
while getopts :f:h ARG
do
    case "${ARG}" in
        f)
          TG_HOSTS_FILE="${OPTARG}"
          ;;
        h)
          HelpMsg
          exit 0
        ;;
        \?)
          # Ëß£ÊûêÂ§±ÊïóÊôÇ„Å´‰∏é„Åà„Çâ„Çå„Çã„ÅÆ„ÅØ„Äå?„Äç„ÄÇ
          UsageMsg
          exit 4
        ;;
    esac
done

shift $(( OPTIND - 1 ))

if [[ ! -s "${TG_HOSTS_FILE}" ]];then
    echo -e "Error target host file is not readble or don't exists or has no contents.\n"
    exit 4
fi

########################################
# Â§âÊï∞ÂÆöÁæ©
########################################

MULTI_USERADD_SH="${BIN_PWD}/multinode_useradd.sh"
MULTI_SSHSET_SH="${BIN_PWD}/multinode_sshset.sh"
MULTI_DIST_SH="${BIN_PWD}/multinode_dist.sh"

# ÂÆüË°åÊó•‰ªòÂèñÂæó
TODAYS_DATE=$(date "+%Y%m%d_%H%M%S")

# Ëµ∑Âãï„Éé„Éº„ÉâÂèñÂæó
MYHOST=$(uname -n)
MYUSER=$(whoami)

# QUIT
RET_QUIT=99
# BACK
RET_BACK=98

RET_OK=0

# ÊñáÂ≠óÂàóÂÖ•ÂäõÈñ¢Êï∞Áî®staticÂ§âÊï∞
typeset -g INPUT_BUFF

#Ëµ∑Âãï„É°„Éã„É•„ÉºÂëº„Å≥Âá∫„Åó

unset TARGET_KBN
OpenMainMenu
RETVAL=$?
if [[ ${RETVAL} -eq ${RET_QUIT} ]];then
    echo -e "\n"
    echo -e ""
    echo -e "bye.\n"
fi

exit 0

